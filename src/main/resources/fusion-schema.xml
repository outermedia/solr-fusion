<?xml version="1.0" encoding="UTF-8"?>
<om:core
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:om="http://solrfusion.outermedia.org/configuration/" 
    xmlns="http://solrfusion.outermedia.org/configuration/type/"
    xsi:schemaLocation="http://solrfusion.outermedia.org/configuration/ configuration.xsd"
>
    <!-- the fields of the fusion schema -->
    <!-- supported types: text, int, long, float, double, boolean, date -->
    <!-- mappings in <fields> below use the following field names: -->
    <om:fusion-schema-fields default-type="text">
        <om:field name="score" type="float"/> <!-- always add score! -->
        <om:field name="id" />
        <om:field name="city" />
        <om:field name="title" />
        <om:field name="numberExample" type="int" />
        <om:field name="mappingExample" />
        <om:field name="computingExample" />
        <om:field name="publicationDate" type="date" format="dd.MM.yyyy" />
    </om:fusion-schema-fields>

    <!-- general type attribute's value in <fields> is one of the following names: -->
    <om:script-type name="javascript-file" class="org.outermedia.solrfusion.types.JsFile" />
    <om:script-type name="beanshell-file" class="org.outermedia.solrfusion.types.BshFile" />
    <om:script-type name="javascript" class="org.outermedia.solrfusion.types.Js" />
    <om:script-type name="beanshell" class="org.outermedia.solrfusion.types.Bsh" />
    <om:script-type name="java-class" class="org.outermedia.solrfusion.types.Java" />
    <om:script-type name="regexp" class="org.outermedia.solrfusion.types.RegularExpression" />
    <om:script-type name="static-table-file" class="org.outermedia.solrfusion.types.TableFile"/>
    <om:script-type name="static-table" class="org.outermedia.solrfusion.types.Table"/>
    <om:script-type name="static-value" class="org.outermedia.solrfusion.types.Value"/>
    <om:script-type name="merge-multi-value" class="org.outermedia.solrfusion.types.MultiValueMerger"/>

    <om:default-search-field>title</om:default-search-field>

    <om:default-sort-field>score desc</om:default-sort-field>
    
    <!-- in a Solr query the operator is explicitly set to rewrite the default -->
    <om:default-operator>AND</om:default-operator>

    <!-- "id" is one name of <fusion-field> which is set with a unique document id -->
    <om:id-generator fusion-name="id"
        class="org.outermedia.solrfusion.DefaultIdGenerator$Factory" />

    <!-- The consolidator merges the document responses of all configured search servers -->
    <om:response-consolidator class="org.outermedia.solrfusion.response.PagingResponseConsolidator$Factory"/>

    <!-- This component transforms a search server's document into a fusion document, -->
    <!-- i.e. all search server's fields are mapped to fusion fields. -->
    <om:response-mapper class="org.outermedia.solrfusion.mapper.ResponseMapper$Factory" />

    <!-- The fusion query is transformed into a specific search server query -->
    <om:query-mapper class="org.outermedia.solrfusion.mapper.QueryMapper$Factory" />

    <!-- This component controls the whole processing of normal queries. -->
    <om:controller class="org.outermedia.solrfusion.FusionController$Factory" />

    <!-- This component controls the whole processing of ids queries (javabin). -->
    <om:ids-controller class="org.outermedia.solrfusion.IdsFusionController$Factory" />

    <om:solr-servers>
        <!-- global settings -->
        <om:timeout>4000</om:timeout>
        <om:disaster-limit>3</om:disaster-limit>
        <om:error key="disaster-limit">Ihre Anfrage konnte nicht von ausreichend
            vielen Systemen beantwortet werden.
        </om:error>
        <!-- the default number of documents to return -->
        <om:page-size>10</om:page-size>
        
        <!-- factory controls re-usage of created objects -->
        <om:query-parser class="org.outermedia.solrfusion.query.EdisMaxQueryParser$Factory"/>

        <om:response-parser class="org.outermedia.solrfusion.response.DefaultResponseParser$Factory" />

        <om:response-renderer type="xml"
            class="org.outermedia.solrfusion.response.DefaultXmlResponseRenderer$Factory" />

        <om:response-renderer type="json"
            class="org.outermedia.solrfusion.response.DefaultJsonResponseRenderer$Factory" />

        <om:response-renderer type="php"
            class="org.outermedia.solrfusion.response.DefaultPhpResponseRenderer$Factory" />

        <om:response-renderer type="javabin"
            class="org.outermedia.solrfusion.response.javabin.JavaBin4$Factory"/>

        <!-- An edismax search String is created from an already mapped query -->
        <om:query-builder class="org.outermedia.solrfusion.mapper.QueryBuilder$Factory" />

        <!-- A dismax search String is created from an already mapped query -->
        <om:dismax-query-builder class="org.outermedia.solrfusion.mapper.DisMaxQueryBuilder$Factory"/>

        <!-- merge solr documents of different solrs into one -->
        <!-- "prio" controls which non empty value to use at first -->
        <om:merge fusion-name="ISBN" class="org.outermedia.solrfusion.DefaultMergeStrategy$Factory">
            <om:target prio="1" target-name="BibliothekA"/>
            <om:target prio="2" target-name="BibliothekB"/>
        </om:merge>         

        <!-- first server, use XML include if you want to put -->
        <!-- this block in a separate file -->
        <om:solr-server name="BibliothekA" version="3.6"
            class="org.outermedia.solrfusion.adapter.solr.DefaultSolrAdapter$Factory">

            <om:url>http://host:port/solr/xyz</om:url>

            <om:score factor="1.2"
                class="org.outermedia.solrfusion.DefaultScore$Factory" />

            <!-- overwrite global setting example -->
            <om:response-parser
                class="org.outermedia.solrfusion.SpecialResponseParser$Factory" />

            <!-- overwrite global setting example -->
            <om:query-builder class="org.outermedia.solrfusion.mapper.QueryBuilder$Factory" />

            <!-- the <id-generator> has to know how to identify solr -->
            <!-- docs by id -->
            <om:unique-key>id</om:unique-key>

            <!-- the max number of documents to request from this search server -->
            <om:max-docs>100</om:max-docs>

            <!-- the following field mappings have to cover all -->
            <!-- fields listed in <fusion-schema-fields> -->

            <!-- simply map a field name, values are not converted -->
            <om:field name="start" fusion-name="city" />
            
            <!-- use the wildcard "*" as postfix in name and fusion-name -->
            <!-- to address dynamic fields -->
            <!-- both fields have to use a wildcard! -->
            <om:field name="*_text" fusion-name="*_t" />
            <om:field name="int_*" fusion-name="i_*" />

            <om:field name="Stadt">
                <om:add>
                    <om:response type="static-value">
                        <value>Berlin</value>
                    </om:response>
                </om:add>
            </om:field>
            <om:field name="Tags">
                <om:add>
                    <om:response type="static-value">
                        <value>article</value>
                        <value>news</value>
                        <value>daily</value>
                    </om:response>
                </om:add>
            </om:field>

            <!-- mapping is defined in a table, which is stored in a file -->
            <om:field name="u" fusion-name="user">
                <om:change>
                    <!-- the mapping has to be bijective -->
                    <om:query-response type="static-table-file">
                        <file>mapping_file-username.xml</file>
                    </om:query-response>
                </om:change>
            </om:field>
            
            <!-- mapping is defined in a table -->
            <om:field name="u" fusion-name="user">
                <om:change>
                    <!-- the mapping has to be bijective -->
                    <om:query-response type="static-table">
                        <entry>
                            <value>u1</value>
                            <fusion-value>user1</fusion-value>
                        </entry>
                        <entry>
                            <value>u2</value>
                            <fusion-value>user2</fusion-value>
                        </entry>
                    </om:query-response>
                </om:change>
            </om:field>

            <!-- map a field with extra operations on the values -->
            <!-- in the query and response -->
            <!-- valid operations are <om:change>, <om:add>, <om:drop> -->
            <!-- <om:change> is only processed when a value exists -->
            <!-- <om:add>/<om:drop> are always processed-->
            <!-- operations are processed in textual order -->
            <!-- <om:change>: <om:response> searches "name" in the solr -->
            <!-- response and maps it to "fusion-name" -->
            <!-- <om:add>: <om:response> ignores the perhaps missing "name" -->
            <!-- in the solr response and adds a value for "fusion-name" -->
            <!-- <om:change>: <om:query> searches "fusion-name" in the -->
            <!-- fusion query and maps it to the "name" in the solr query -->
            <!-- <om:add>: <om:query> ignores the perhaps missing "fusion-name" -->
            <!-- in the fusion query and adds a value for "name" in -->
            <!-- the solr query -->
            <!-- <om:drop> removes the field either from the query or -->
            <!-- response -->
            <om:field name="start" fusion-name="city">
                <om:change>
                    <om:response type="javascript-file"><file>Pfad.js</file></om:response>     
                    <!--             
                    <om:response type="java-class"><class>org.outermedia.solrfusion.ComplexAction</class></om:response>            
                    -->       
                    <om:query type="beanshell-file"><file>Pfad.bsh</file></om:query>     
                    <!--                
                    <om:query type="beanshell">
                        <script>
                        currentQuery = currentQuery
                            .replace("XXX",System.currentTimeMillis());
                        </script>
                    </om:query>
                    <om:query type="regexp">
                       <pattern>ab(.*)ende</pattern>
                       <replacement>AB\1de</replacement>
                   </om:query>                 
                   -->
                </om:change>
            </om:field>

            <!-- ignore field in response -->
            <om:field name="ende52">
                <om:drop>
                    <om:response />
                </om:drop>
            </om:field>

            <!-- ignore field in query -->
            <om:field fusion-name="ende52">
                <om:drop>
                    <om:query />
                </om:drop>
            </om:field>

            <!-- ignore field in query and response -->
            <om:field name="ende52" fusion-name="ende">
                <om:drop>
                    <om:response />
                    <om:query />
                </om:drop>
            </om:field>

            <!-- add field to response, but ignore query value -->
            <om:field name="ende51" fusion-name="ende">
                <om:drop>
                    <om:query />
                </om:drop>
                <om:add>
                    <!-- <om:query> not valid, because field is dropped -->
                    <om:response type="beanshell-file"><file>Pfad.bsh</file></om:response>
                </om:add>
            </om:field>

            <!-- Regular expressions are supported for field name matching. -->
            <!-- Because a field rule is used when mapping the fusion query and the search server -->
            <!-- response, both directions have to be declared. One direction consists of one -->
            <!-- *-pattern="" and one *-replacement="". -->
            <!-- Internally Java's java.util.regex.Pattern/Matcher and Matcher.replaceAll(String) are used. -->
            <om:field
                name-pattern="val([0-9]+)Start" fusion-name-replacement="valueFrom$1"
                name-replacement="val$1Start" fusion-name-pattern="valueFrom([0-9]+)"
            />

        </om:solr-server>        
            
        <!-- more solr servers definitions ... -->

    </om:solr-servers>
</om:core>